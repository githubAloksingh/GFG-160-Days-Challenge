#Binary Search

class Solution:   
    def peakElement(self,arr):
        # Code here
        n=len(arr)
        if n==1:
            return 0
        if arr[0]>arr[1]:
            return 0
        if arr[n-1]>arr[n-2]:
            return n-1
        low, high=1,n-1
        while low<=high:
            mid=low+(high-low)//2
            if arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:
                return mid
            
            if arr[mid]>arr[mid-1]:
                low=mid+1
            else:
                high=mid-1
        return -1
        
        


#{ 
 # Driver Code Starts
if __name__ == "__main__":
    t = int(input())  # Read number of test cases
    for _ in range(t):
        # Read input and split it into a list of integers
        arr = list(map(int, input().split()))
        # Create a Solution object and calculate the result

        index = Solution().peakElement(arr)
        n = len(arr)
        flag = False
        if index < 0 or index >= n:
            flag = False
        else:
            if index == 0 and n == 1:
                flag = True
            elif index == 0 and arr[index] > arr[index + 1]:
                flag = True
            elif index == n - 1 and arr[index] > arr[index - 1]:
                flag = True
            elif index > 0 and index < n - 1 and arr[
                    index - 1] < arr[index] and arr[index] > arr[index + 1]:
                flag = True
            else:
                flag = False

        if flag:
            print("true")
        else:
            print("false")
        print("~")

# } Driver Code Ends









#class Solution:   
#   def peakElement(self,arr):
#        # Code here
#        n=len(arr)
#       for i in range(n):
#           if (i==0 or arr[i]>arr[i-1]) and (i==n-1 or arr[i]>arr[i+1]):
#               return i
#       return -1

